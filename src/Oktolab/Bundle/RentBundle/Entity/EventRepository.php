<?php

namespace Oktolab\Bundle\RentBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\Expr;
use Oktolab\Bundle\RentBundle\Model\RentableInterface;

/**
 * EventRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EventRepository extends EntityRepository
{

    /**
     * Finds all Events in and within the given time period
     *
     * @param \DateTime $begin
     * @param \DateTime $end
     * @param int       $hydrationMode
     *
     * @return array
     */
    public function findAllFromBeginToEnd(\DateTime $begin, \DateTime $end, $hydrationMode = null)
    {
        return $this->getAllFromBeginToEndQuery($begin, $end)
            ->getQuery()->getResult($hydrationMode);
    }

    /**
     * Finds all Events for Object, optionally for given time period.
     *
     * @param RentableInterface $object
     * @param \DateTime         $begin
     * @param \DateTime         $end
     *
     * @return integer
     */
    public function findAllForObjectCount(RentableInterface $object, \DateTime $begin = null, \DateTime $end = null)
    {
        return (int) $this->getAllFromBeginToEndQuery($begin, $end)
            ->select('COUNT(e.id)')
            ->join('OktolabRentBundle:EventObject', 'o')
            ->andWhere(Expr::andX(
                Expr::eq('o.type', ':objectType'),
                Expr::eq('o.object', ':objectId')
            ))
            ->setParameter('objectType', $object->getType())
            ->setParameter('objectId', $object->getId())
            ->getQuery()->getSingleScalarResult();
    }

    /**
     * Returns QueryBuilder for all Events in and within the given time period
     * @param \DateTime $begin
     * @param \DateTime $end
     *
     * @return \Doctrine\ORM\QueryBuilder
     */
    public function getAllFromBeginToEndQuery(\DateTime $begin, \DateTime $end)
    {
        $qb = $this->getEntityManager()->createQueryBuilder()
            ->select('e.id')->from('OktolabRentBundle:Event', 'e')
            ->where(Expr::orX(
                Expr::andX(Expr::lte('e.begin', ':begin'), Expr::gt('e.end', ':begin')),
                Expr::andX(Expr::gte('e.begin', ':begin'), Expr::lt('e.end', ':end')),
                Expr::andX(Expr::lt('e.begin', ':end'), Expr::gte('e.end', ':end'))
            ));

        $qb->setParameter('begin', $begin);
        $qb->setParameter('end', $end);

        return $qb;
    }
}
